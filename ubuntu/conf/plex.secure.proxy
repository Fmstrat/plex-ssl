# Reverse HTTPS proxy for Plex Media Server

server {

    listen 30443;
    server_name my.externalhost.com;

    gzip             on;
    gzip_proxied     any;
    gzip_types       text/css text/plain text/xml application/xml application/javascript application/x-javascript text/javascript application/json text/$
    gzip_vary        on;

    ssl on;
    ssl_certificate /opt/ssl-plex/certs/proxy.pem;
    ssl_certificate_key /opt/ssl-plex/certs/proxy.key;
    ssl_session_cache shared:SSL:10m;

    # if port was accessed as http redirect https
    # (.js from plex.tv checks server status using http. Not good.)
    error_page 497 = @unsecure;

    location @proxy {
        proxy_pass http://192.168.0.10:32400;  # <-- Change to your PMS IP address
        proxy_set_header Host $host:$server_port;

        # re-write redirects to http as to https
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        break;
    }
    
    location @unsecure {
        content_by_lua '
            local args = ngx.req.get_uri_args()
            local headers = ngx.req.get_headers()
            if ngx.req.get_method() == "GET" and args["X-Plex-Token"] == nil and headers["X-Plex-Token"] == nil then
                -- If a GET and no token has been sent, redirect to https
                ngx.redirect("https://" .. ngx.var.host .. ":" .. ngx.var.server_port .. ngx.var.request_uri)
            else
                -- Else, log the insecure request and proxy the request
                if headers["X-Plex-Token"] ~= nil then
                    -- Token was passed in header.  Everything else probably was to.
                    args = headers
                end
                local file = io.open("/var/log/nginx/security.log", "a")
                local client = args["X-Plex-Client-Platform"]
                local device = args["X-Plex-Device-Name"]
                if client == nil then
                    client = "unknown"
                end
                if device == nil then
                    device = "unknown"
                end
                file:write(ngx.localtime() ..
                  "\tTOKEN EXPOSED" ..
                  "\t" .. ngx.var.remote_addr ..
                  "\t" .. ngx.unescape_uri(client) ..
                  "\t" .. ngx.unescape_uri(device) ..
                  "\t" .. ngx.req.get_method() ..
                  "\t" .. "http://" .. ngx.var.host .. ":" .. ngx.var.server_port .. ngx.var.request_uri .. "\\n")
                file:close()
                ngx.exec("@proxy")
            end
        ';
        break;
    }

    location ~ "(.*)websockets(.*)" {

        proxy_pass http://192.168.0.10:32400;  # <-- Change to your PMS IP address
        proxy_cache off;
        proxy_buffering off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;

    }

    location / {

        proxy_pass http://192.168.0.10:32400;  # <-- Change to your PMS IP address
        proxy_set_header Host $host:$server_port;

        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_redirect http://$host:$server_port https://$host:$server_port;

    }

}
